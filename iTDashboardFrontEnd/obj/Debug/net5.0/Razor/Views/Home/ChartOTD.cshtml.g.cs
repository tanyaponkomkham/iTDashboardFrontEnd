#pragma checksum "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "43ae3bd5feacc69ba8b19e014303b2ae6eb5443f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_ChartOTD), @"mvc.1.0.view", @"/Views/Home/ChartOTD.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\_ViewImports.cshtml"
using iTDashboardFrontEnd;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\_ViewImports.cshtml"
using iTDashboardFrontEnd.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"43ae3bd5feacc69ba8b19e014303b2ae6eb5443f", @"/Views/Home/ChartOTD.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"99f7ec520bf37c06db868103d1cfb530daaea8cf", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_ChartOTD : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""col bg-white custom-border"" style=""height: 370px; width: 670px; margin-top: 8px;"">
    <div style=""height: 367px;"" id=""containerchart2""></div>
</div>
<div class=""col bg-white custom-border"" style=""height: 370px; width: 670px; margin-top: 11px; "" id=""Chart3"">
    <div style=""height: 367px;"" id=""containerchart3""></div>
</div>
<script>

    $(document).ready(function () {
        loadChart();


    });
     function loadChart() {
            $.ajax({
                type: ""GET"",
                url:`/Home/IndexChart4?year=${`");
#nullable restore
#line 17 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                          Write(TempData["Year2"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("`}&target=${`");
#nullable restore
#line 17 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                                                         Write(TempData["Target"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"`}`,
                dataType: ""json"",
                data: {},
                success: function (result) {
                    BindChart(result, ""Main"");
                },
                error: function (data) {
                    alert(""The System has some problem..please try it again."");
                }
            }); 

          $.ajax({
            type: ""GET"",
             url: `/Home/IndexChart5?year=${`");
#nullable restore
#line 30 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                        Write(TempData["Year2"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("`}&mmonth=${`");
#nullable restore
#line 30 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                                                       Write(TempData["Month2"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("`}&target=${`");
#nullable restore
#line 30 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                                                                                       Write(TempData["Target"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("`}`,\r\n            dataType: \"json\",\r\n            data: {},\r\n                success: function (result) {\r\n                    var monthColor = getMonthColor(`");
#nullable restore
#line 34 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                               Write(TempData["Month2"]);

#line default
#line hidden
#nullable disable
            WriteLiteral("`);\r\n                    BindChart2(result, \"Category\", monthColor, `");
#nullable restore
#line 35 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                                           Write(TempData["Year2"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"`);
                },
                error: function (data) {
                    alert(""The System has some problem..please try it again."");
                },
            })
         function getMonthColor(month) {
             switch (month) {
                 case ""Jan"":
                     return '#4169E1';
                 case ""Feb"":
                     return '#7B68EE';
                 case ""Mar"":
                     return '#1E90FF';
                 case ""Apr"":
                     return '#00BFFF';
                 case ""May"":
                     return '#87CEFA';
                 case ""Jun"":
                     return '#87CEEB';
                 case ""Jul"":
                     return '#AFEEEE';
                 case ""Aug"":
                     return '#6495ED';
                 case ""Sep"":
                     return '#0000FF';
                 case ""Oct"":
                     return '#0000CD';
                 case ""Nov"":
                     return '#00008B'");
            WriteLiteral(@";
                 case ""Dec"":
                     return '#191970';
                 default:
                     return getRandColor(false, 2);
             }
         }

    }

    function BindChart(serie, name, color) {

        var _data = [];
        var _otdTarget = [];
        for (var i in serie) {

            var itm = {
                name: (name == ""Main"" ? serie[i].sh_month : serie[i].sh_month),
                y: (name == ""Main"" ? serie[i].otd : serie[i].otd),
                target: serie[i].target,
                chart: (name == ""Main"" ? 'Monthly' : 'Category'),
                iyear: `");
#nullable restore
#line 85 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                   Write(TempData["Year2"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"`,
                imonth: serie[i].sh_month,
                drilldown: (name == ""Main"" ? true : false),

            }

            _data.push(itm);
            _otdTarget.push(serie[i].target);

        }

        var lastColor;


        Highcharts.chart('containerchart2', {
            chart: {
                type: 'column',
                backgroundColor: '#FFFFFF',
                borderColor: '#17202A',
                borderWidth: 0,
                className: 'dark-container',
                plotBackgroundColor: '#F4F6F6',
                plotBorderColor: '#A9CCE3',
                plotBorderWidth: 1,
                events: {
                }
            },
            title: {
                text: 'OTD - IT ' + (name == ""Main"" ? '' : serie[i].sh_month) + ' (Target : >= ' + `");
#nullable restore
#line 113 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                                                                               Write(TempData["Target"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"` + ' Calendar day)'
            },
            xAxis: {
                type: 'category',
                labels: {
                    style: {
                        color: 'black',
                        fontWeight: 'bold',
                        fontSize: '12px'

                    }

                },

                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        fontSize: '15px',
                        color: 'black'
                    }
                },

            },
            legend: {
                itemStyle: {
                    fontSize: '15px',
                    font: '15pt Trebuchet MS, Verdana, sans-serif',
                    color: '#8b8378'

                }

            },
            yAxis: {
                min: 0,
                max: 100,
                title: {
                    text: 'Percent ( % )'
                },
       ");
            WriteLiteral(@"         stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || '#0A0A09'
                    }
                },

            },
            tooltip: {
                headerFormat: '<span style=""font-size:11px"">{series.name}</span><br>',
                pointFormat: '<b>{point.y} %</b>'
            },
            legend: {
                enabled: true
            },

            plotOptions: {
                series: {
                    stacking: 'normal',
                    borderWidth: 0,
                    dataLabels: {
                        enabled: false
                    },
                    colorByPoint: true,
                    point: {
                        events: {
                            click: function (e) {
                                {
                                    if (e.point.chart == '");
            WriteLiteral(@"Monthly') {

                                        GetCategoryChart(e.point.iyear, e.point.name, e.point.itarget, e.point.color, e.srcElement.attributes.fill.nodeValue);

                                    }
                                    else if (e.point.chart == 'Category') {

                                        onClick(e.point.name, e.point.imonth, e.point.iyear);
                                       
                                    }


                                }
                            }
                        }
                    }
                }
            },
            credits: {
                ""enabled"": true
            },
            series: [{
                type: 'column',
                name: 'OTD',
                pointWidth: 30,
                colors: [
                    '#4169E1', '#7B68EE', '#1E90FF', '#00BFFF', '#87CEFA', '#87CEEB',
                    '#AFEEEE', '#6495ED', '#0000FF', '#0000CD', '#00008B', '#191970'
      ");
            WriteLiteral(@"          ],
                colorByPoint: true,
                data: _data,

                borderWidth: 2,


            }, {
                type: 'spline',
                name: 'Target',
                data: _otdTarget,//_otdTarget,
                marker: {
                    lineWidth: 2,
                    lineColor: Highcharts.getOptions().colors[3],
                    fillColor: 'white'
                }
            }]
        });


        function GetCategoryChart(year, name, target, color) {
           
            $.ajax({
            type: ""GET"",
                url: `/Home/IndexChart5?year=` + year + `&mmonth=` + name,
            dataType: ""json"",
            data: {},
                success: function (result) {

                    BindChart2(result, ""Category"", color, year, target);
                  
                },
                error: function (data) {
                    alert(""The System has some problem..please try it again."");
           ");
            WriteLiteral(@"     },
            })
        }
    }

    function BindChart2(serie, name, color, year, target) {
    
        var _data = [];
        var _otdTarget = [];
        for (var i in serie) {
            var itm = {
                name: (name == ""Main"" ? serie[i].sh_month : serie[i].cate),
                y: (name == ""Main"" ? serie[i].otd : serie[i].otd),
                target: 80,
                chart: (name == ""Main"" ? 'Monthly' : 'Category'),
                iyear: year,
                imonth: serie[i].sh_month,
                drilldown: (name == ""Main"" ? true : false),
                color: color
            }

            _data.push(itm);
            _otdTarget.push(80);

        }

   

        Highcharts.chart('containerchart3', {
            chart: {
                type: 'column',
                backgroundColor: '#FFFFFF',
                borderColor: '#17202A',
                borderWidth: 0,
                className: 'dark-container',
                plotBack");
            WriteLiteral(@"groundColor: '#F4F6F6',
                plotBorderColor: '#A9CCE3',
                plotBorderWidth: 1,
                events: {
                }
            },
            title: {
                text: 'OTD - IT ' + (name == ""Main"" ? '' : serie[i].sh_month) + ' (Target : >= '  + `");
#nullable restore
#line 285 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\ChartOTD.cshtml"
                                                                                                Write(TempData["Target"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"` + ' Calendar day)'
            },

            xAxis: {
                type: 'category',
              
                labels: {
                    style: {
                        color: 'black',
                        fontWeight: 'bold',
                        fontSize: '12px',
                        
                    },
                   

                },

                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        fontSize: '15px',
                        color: 'black'
                    }
                },

            },
            legend: {
                itemStyle: {
                    fontSize: '15px',
                    font: '15pt Trebuchet MS, Verdana, sans-serif',
                    color: '#8b8378'
                }

            },
            yAxis: {
                min: 0,
                max: 100,
                title: {
       ");
            WriteLiteral(@"             text: 'Percent ( % )'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || '#0A0A09'
                    }
                },

            },
            
            tooltip: {
                headerFormat: '<span style=""font-size:11px"">{series.name}</span><br>',
                pointFormat: '<b>{point.y} %</b>'
            },
            legend: {
                enabled: true
            },

            plotOptions: {
                series: {
                    stacking: 'normal',
                    borderWidth: 0,
                    dataLabels: {
                        enabled: false
                    },
                    colorByPoint: true,

                }
            },
            credits: {
                ""enabled"": true
            },

            series: ");
            WriteLiteral(@"[{
                type: 'column',
                name: 'OTD',
                pointWidth: 30,
                data: _data,
                borderWidth: 2,
            }, {
                type: 'spline',
                name: 'Target',
                data: _otdTarget,//_otdTarget,
                marker: {
                    lineWidth: 2,
                    lineColor: Highcharts.getOptions().colors[3],
                    fillColor: 'white'
                }
            }]

        });



    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
