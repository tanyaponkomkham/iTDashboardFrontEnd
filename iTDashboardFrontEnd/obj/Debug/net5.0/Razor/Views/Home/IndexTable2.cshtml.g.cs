#pragma checksum "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "21ac6115e4ff2e4a785d4226d37155b149a0c28b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_IndexTable2), @"mvc.1.0.view", @"/Views/Home/IndexTable2.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\_ViewImports.cshtml"
using iTDashboardFrontEnd;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\_ViewImports.cshtml"
using iTDashboardFrontEnd.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"21ac6115e4ff2e4a785d4226d37155b149a0c28b", @"/Views/Home/IndexTable2.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"99f7ec520bf37c06db868103d1cfb530daaea8cf", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_IndexTable2 : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<div class=""col bg-white border border-dark"" style=""height: 370px; margin-top: 8px;"">
    <div style=""height: 367px;"" id=""containerchart2""></div>
</div>
<div class=""col bg-white border border-dark"" style=""height: 370px; margin-top: 11px; "">
    <div style=""height: 367px;"" id=""containerchart3""></div>
</div>
<script>

    $(document).ready(function () {
        loadChart();
    });
     function loadChart() {
            console.log(");
#nullable restore
#line 13 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml"
                   Write(ViewBag.Year);

#line default
#line hidden
#nullable disable
            WriteLiteral(");\r\n            console.log(");
#nullable restore
#line 14 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml"
                   Write(ViewBag.Month);

#line default
#line hidden
#nullable disable
            WriteLiteral(");\r\n            $.ajax({\r\n                type: \"GET\",\r\n                url: `/Home/IndexChart2` + \'?year=\' + ");
#nullable restore
#line 17 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml"
                                                 Write(ViewBag.Year);

#line default
#line hidden
#nullable disable
            WriteLiteral(@",
                dataType: ""json"",
                data: {},
                success: function (result) {
                    BindChart(result, ""Main"");
                },
                error: function (data) {
                    alert(""The System has some problem..please try it again."");
                }
            }); // Removed the extra comma here
        }
    function BindChart(serie, name, color) {

        var _data = [];
        var _tatTarget = [];
        for (var i in serie) {
            var itm = {
                name: (name == ""Main"" ? serie[i].short_month : serie[i].category),
                y: (name == ""Main"" ? serie[i].tat : serie[i].taTofCate),
                target: serie[i].target,
                chart: (name == ""Main"" ? 'Monthly' : 'Category'),
                iyear: ");
#nullable restore
#line 38 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml"
                  Write(ViewBag.Year);

#line default
#line hidden
#nullable disable
            WriteLiteral(@",
                imonth: serie[i].short_month,
                drilldown: (name == ""Main"" ? true : false),
                color: (name == ""Main"" ? getRandColor(false, 2) : color),
                borderColor: (name == ""Main"" ? '' : color)
            }

            _data.push(itm);
            _tatTarget.push(serie[i].target);

        }

        console.log(_data);
        console.log(_tatTarget);
        var lastColor;
        function getRandColor(same, darkness) {
            //6 levels of brightness from 0 to 5, 0 being the darkest
            var rgb = [];
            if (same && lastColor) {
                rgb = lastColor;
            } else {
                rgb = [Math.random() * 256, Math.random() * 256, Math.random() * 256];
            }
            var mix = [darkness * 52, darkness * 109, darkness * 210]; //51 => 255/5
            var mixedrgb = [rgb[0] + mix[0], rgb[1] + mix[1], rgb[2] + mix[2]].map(function (x) {
                return Math.round(x / 2.0)
         ");
            WriteLiteral(@"   })
            lastColor = rgb;
            return ""rgb("" + mixedrgb.join("","") + "")"";
        }

        Highcharts.chart('containerchart2', {
            chart: {
                type: 'column',
                backgroundColor: '#FFFFFF',
                borderColor: '#17202A',
                borderWidth: 0,
                className: 'dark-container',
                plotBackgroundColor: '#F4F6F6',
                plotBorderColor: '#A9CCE3',
                plotBorderWidth: 1,
                events: {
                }
            },
            title: {
                text: 'TAT - IT ' + (name == ""Main"" ? '' : serie[i].short_month) + ' (Target : < ' +  ' Calendar day)'
            },
            xAxis: {
                type: 'category',

                labels: {
                    style: {
                        color: 'black',
                        fontWeight: 'bold',
                        fontSize: '12px'

                    }

                },

        ");
            WriteLiteral(@"        stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        fontSize: '15px',
                        color: 'black'
                    }
                },

            },
            legend: {
                itemStyle: {
                    fontSize: '15px',
                    font: '15pt Trebuchet MS, Verdana, sans-serif',
                    color: '#8b8378'

                }

            },
            yAxis: {
                min: 0,
                max: 70,
                title: {
                    text: 'Turnaround time of TSD(Calendar Day)'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || '#0A0A09'
                    }
                },

            },
            tooltip: {
");
            WriteLiteral(@"                formatter: function () {
                    return '<b>' + '<br/>' +
                        this.series.name + ': ' + this.y + ' Days' + '<br/>' +
                        'Total: ' + this.point.stackTotal + ' Days';
                }
            },
            legend: {
                enabled: true
            },

            plotOptions: {
                series: {
                    stacking: 'normal',
                    borderWidth: 0,
                    dataLabels: {
                        enabled: false
                    },
                    colorByPoint: true,
                    point: {
                        events: {
                            click: function (e) {
                                {
                                    //Call table
                                    if (e.point.chart == 'Monthly') {
                                       
                                        GetCategoryChart(e.point.name, e.srcElement.attribute");
            WriteLiteral(@"s.fill.nodeValue);

                                        console.log(e);
                                        console.log(e.srcElement.attributes.fill.nodeValue);
                                        //onClick(e.point.name, this.name, e.point.label);
                                    }
                                    else if (e.point.chart == 'Category') {

                                        onClick(e.point.name, e.point.imonth, e.point.iyear);
                                        //console.log(e.point.name);
                                        // console.log(e.point.imonth);
                                        //console.log(e.point.iyear);
                                    }


                                }
                            }
                        }
                    }
                }
            },
            credits: {
                ""enabled"": true
            },
            series: [{
                type: 'column',
        ");
            WriteLiteral(@"        name: 'TAT',
                pointWidth: 30,
                /*colorByPoint: true,*/
                data: _data,

                borderWidth: 2,


            }, {
                type: 'spline',
                name: 'Target',
                data: _tatTarget,//_tatTarget,
                marker: {
                    lineWidth: 2,
                    lineColor: Highcharts.getOptions().colors[3],
                    fillColor: 'white'
                }
            }]


        //}, function (e) {
        //    console.log(this.series[0].data[0]);
        //    if (this.series[0].data[0].chart == 'Category') {
        //        //xPixel = this.xAxis[0].toPixels(this.series[0].points[5].x);
        //        //yPixel = this.yAxis[0].toPixels(this.series[0].points[5].y);..

        //        xPixel = 740;
        //        yPixel = 50;

        //        this.renderer.button('<< Back', xPixel + 5, yPixel, function () {
        //            loadChart();
        //       ");
            WriteLiteral(@" }).attr({
        //            zIndex: 9,
        //            position: {
        //                align: 'left',
        //            }
        //            //verticalAlign: 'top',
        //            //align: 'center'
        //        }).add();
        //    }

        });


        function GetCategoryChart(name, color) {
            $.ajax({
            type: ""GET"",
            url:`/Home/IndexChart3?year=");
#nullable restore
#line 231 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml"
                                   Write(ViewBag.Year);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"&mmonth=` + name,
            dataType: ""json"",
            data: {},
                success: function (result) {

                    BindChart2(result, ""Category"", color);
                },
                error: function (data) {
                    alert(""The System has some problem..please try it again."");
                },
            })
        }
    }

    function BindChart2(serie, name, color) {

        var _data = [];
        var _tatTarget = [];
        for (var i in serie) {
            var itm = {
                name: (name == ""Main"" ? serie[i].short_month : serie[i].category),
                y: (name == ""Main"" ? serie[i].tat : serie[i].taTofCate),
                target: serie[i].target,
                chart: (name == ""Main"" ? 'Monthly' : 'Category'),
                iyear: ");
#nullable restore
#line 255 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml"
                  Write(ViewBag.Year);

#line default
#line hidden
#nullable disable
            WriteLiteral(@",
                imonth: serie[i].short_month,
                drilldown: (name == ""Main"" ? true : false),
                color: (name == ""Main"" ? getRandColor(false, 2) : color),
                borderColor: (name == ""Main"" ? '' : color)
            }

            _data.push(itm);
            _tatTarget.push(serie[i].target);

        }

        console.log(_data);
        console.log(_tatTarget);

        Highcharts.chart('containerchart3', {
            chart: {
                type: 'column',
                backgroundColor: '#FFFFFF',
                borderColor: '#17202A',
                borderWidth: 0,
                className: 'dark-container',
                plotBackgroundColor: '#F4F6F6',
                plotBorderColor: '#A9CCE3',
                plotBorderWidth: 1,
                events: {
                }
            },
            title: {
                text: 'TAT - IT ' + (name == ""Main"" ? '' : serie[i].short_month) + ' (Target : < ' +  ' Calendar day)'
  ");
            WriteLiteral(@"          },
            xAxis: {
                type: 'category',

                labels: {
                    style: {
                        color: 'black',
                        fontWeight: 'bold',
                        fontSize: '12px'

                    }

                },

                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        fontSize: '15px',
                        color: 'black'
                    }
                },

            },
            legend: {
                itemStyle: {
                    fontSize: '15px',
                    font: '15pt Trebuchet MS, Verdana, sans-serif',
                    color: '#8b8378'

                }

            },
            yAxis: {
                min: 0,
                max: 70,
                title: {
                    text: 'Turnaround time of TSD(Calendar Day)'
                },
       ");
            WriteLiteral(@"         stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || '#0A0A09'
                    }
                },

            },
            tooltip: {
                formatter: function () {
                    return '<b>' + '<br/>' +
                        this.series.name + ': ' + this.y + ' Days' + '<br/>' +
                        'Total: ' + this.point.stackTotal + ' Days';
                }
            },
            legend: {
                enabled: true
            },

            plotOptions: {
                series: {
                    stacking: 'normal',
                    borderWidth: 0,
                    dataLabels: {
                        enabled: false
                    },
                    colorByPoint: true,

                }
            },
            credits: {
                ""enabled"": tru");
            WriteLiteral(@"e
            },
            series: [{
                type: 'column',
                name: 'TAT',
                pointWidth: 30,
                /*colorByPoint: true,*/
                data: _data,

                borderWidth: 2,


            }, {
                type: 'spline',
                name: 'Target',
                data: _tatTarget,//_tatTarget,
                marker: {
                    lineWidth: 2,
                    lineColor: Highcharts.getOptions().colors[3],
                    fillColor: 'white'
                }
            }]


     

        });


        function GetCategoryChart(name, color) {
            $.ajax({
            type: ""GET"",
            url:`/Home/IndexChart3?year=");
#nullable restore
#line 388 "C:\Users\tanyapornk.std\Desktop\iTDashboard\Github\iTDashboardFrontEnd\iTDashboardFrontEnd\Views\Home\IndexTable2.cshtml"
                                   Write(ViewBag.Year);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"&mmonth=` + name,
            dataType: ""json"",
            data: {},
                success: function (result) {

                    BindChart(result, ""Category"", null, 'containerchart3');
                },
                error: function (data) {
                    alert(""The System has some problem..please try it again."");
                },
            })
        }
    }



</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
